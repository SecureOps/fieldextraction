morphlines : [
  {
    id : iptables_morphlines
    importCommands : ["org.kitesdk.**"]

    commands : [
      #{ logInfo { format : "input record paloalto: {}", args : ["@{}"] } }

      ## Generic iptables log parser
      {
        grok {
          dictionaryResources : [ "grokpatterns/grok-patterns" ]
          dictionaryString:  """
            TIMESTAMP (?:%{TIMESTAMP_ISO8601}|%{SYSLOGTIMESTAMP})
            IPTABLES (?:kernel: :) %{DATA:comment} IN=%{DATA:inbound_if} OUT=%{DATA:outbound_if} MAC=%{DATA:macaddr} SRC=%{IP:src} DST=%{IP:dst} LEN=%{DATA:pkt_length_i} TOS=%{DATA:pkt_TOS} PREC=%{DATA:pkt_PREC} TTL=%{DATA:pkt_TTL_i} ID=%{NUMBER:pkt_id_i} %{DATA:pkt_flag} PROTO=%{DATA:protocol} SPT=%{DATA:src_port} DPT=%{DATA:dst_port} WINDOW=%{DATA:pkts_WINDOW_i} RES=%{DATA:pkt_RES} %{DATA:pkt_type_i} URGP=%{GREEDYDATA:pkt_URGP_i}

          """
          expressions : {
            message : """^(?:<%{INT:priority}>)?%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} ?%{IPTABLES:iptables}"""
          }
        }
      }

      ## Remove temporary and useless fields before sending it to the cluster
      {
        removeFields {
          blacklist : ["literal:iptables", "glob:FUTURE_USE*"]
          # whitelist: []
        }
      }

      # log the record at DEBUG level to SLF4J
      #{ logInfo { format : "output record paloalto: {}", args : ["@{}"] } }

    ]
  }
]

