DICTIONARY_STRINGS = """
            TIMESTAMP (?:%{TIMESTAMP_ISO8601}|%{SYSLOGTIMESTAMP})
            PALOALTO_TRAFFIC %{DATA},%{DATA},(?:TRAFFIC),%{GREEDYDATA}
	    	PALOALTO_THREAT %{DATA},%{DATA},(?:THREAT),%{GREEDYDATA}
"""
morphlines : [
  {
    id : morphlines_paloalto_traffic
    importCommands : ["org.kitesdk.**"]

    commands : [
      ## Detect what type of Palo Alto log we are dealing with, usually in the 3rd or 4th field (TRAFFIC, THREAT, etc.)
      {
        grok {
          dictionaryResources : [ "grokpatterns/grok-patterns" ]
          dictionaryString: ${DICTIONARY_STRINGS}
          expressions : {
            message : """^(?:<%{INT:priority}>)?%{TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (%{INT},)?%{PALOALTO_TRAFFIC:paloalto_traffic}"""
          }
        }
      }

      ## Split CSV and set the field names according to Palo Alto documentation: https://live.paloaltonetworks.com/servlet/JiveServlet/downloadBody/2021-102-8-13361/PANOS-Syslog-Integration-TN-RevM.pdf
      {
        split {
          inputField : paloalto_traffic
          outputFields : [ receive_time_ts, serial, type, subtype, FUTURE_USE1, time_generated_ts,src,dst,natsrc,natdst,rule,srcuser,dstuser,app,vsys,from,to,inbound_if,outbound_if,logset,FUTURE_USE2,sessionid,repeatcnt_i,src_port,dst_port,natsrc_port,natdst_port,flags,protocol,action,bytes_total,bytes_total_sent,bytes_total_received,packets_total,start_ts,elapsed,category,FUTURE_USE3,seqno_i,actionflags,srcloc,dstloc,FUTURE_USE4,packets_sent,packets_received ]
          separator : ","
          isRegex : false
          addEmptyStrings : true
          trim : true
          limit: -1
        }
      }
      ## Remove temporary and useless fields before sending it to the cluster
      {
        removeFields {
          blacklist : ["literal:paloalto_traffic", "glob:FUTURE_USE*"]
        }
      }
              ## Add the HEADER values to identify this morphline
      {
        addValues {
          HEADER_extractor_name : morphlines_paloalto_traffic
          HEADER_extractor_version : [1]
        }
      }
    ]
  }
  {
    id : morphlines_paloalto_threat
    importCommands : ["org.kitesdk.**"]

    commands : [
      ## Detect what type of Palo Alto log we are dealing with, usually in the 3rd or 4th field (TRAFFIC, THREAT, etc.)
      {
        grok {
          dictionaryResources : [ "grokpatterns/grok-patterns" ]
          dictionaryString: ${DICTIONARY_STRINGS}
          expressions : {
            message : """^(?:<%{INT:priority}>)?%{TIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} (%{INT},)?%{PALOALTO_THREAT:paloalto_threat}"""
          }
        }
      }
      ## Split CSV and set the field names according to Palo Alto documentation: https://live.paloaltonetworks.com/servlet/JiveServlet/downloadBody/2021-102-8-13361/PANOS-Syslog-Integration-TN-RevM.pdf
      {
        split {
          inputField : paloalto_threat
          outputFields : [ receive_time_ts, serial, type, subtype, FUTURE_USE1, time_generated_ts,src,dst,natsrc,natdst,rule,srcuser,dstuser,app,vsys,from,to,inbound_if,outbound_if,logset,FUTURE_USE2,sessionid,repeatcnt_i,src_port,dst_port,natsrc_port,natdst_port,flags,protocol,action, misc, threatid, threat_category, threat_severity, direction, seqno_i, actionflags, srcloc, dstloc, FUTURE_USE3, subtype ]
          separator : ","
          isRegex : false
          addEmptyStrings : true
          trim : true
          limit: -1
        }
      }
      ## Remove temporary and useless fields before sending it to the cluster
      {
        removeFields {
          blacklist : ["literal:paloalto_threat", "glob:FUTURE_USE*"]
          # whitelist: []
        }
      }
      {
        addValues {
          HEADER_extractor_name : morphlines_paloalto_threat
          HEADER_extractor_version : [1]
        }
      }
    ]
  }
]